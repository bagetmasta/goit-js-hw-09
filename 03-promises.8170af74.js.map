{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAG3BC,EAAmB,EACnBC,EAAW,EAEfL,EAAKC,KAAKK,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAEC,iBAEF,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAMH,EAANG,OAAQC,EAAKJ,EAALK,MAAOC,EAAIN,EAAJM,KAGzBC,EAAmBC,OAAOJ,EAAMK,OAE9BC,EAAaC,aAAY,WAC7B,GAAIhB,EAAmBa,OAAOL,EAAOM,OAInC,OAHAd,EAAmB,EACnBC,EAAW,OACXgB,cAAcF,GAsBpB,IAAuBG,EAAUR,GAAVQ,EAlBLjB,EAkBeS,EAlBLE,EAmBnB,IAAIO,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CACNK,SAAUP,EACVR,MAAOA,IAITW,EAAO,CACLI,SAAUP,EACVR,MAAOA,MAGVA,OAlCAgB,MAAK,SAAAC,G,IAAGC,EAAQD,EAARF,SAAUf,EAAKiB,EAALjB,MACjBmB,EAAAnC,GAASoC,OAAOC,QACd,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANtB,EAAM,UAGjDuB,OAAM,SAAAN,G,IAAGO,EAAQP,EAARF,SAAUf,EAAKiB,EAALjB,MAClBmB,EAAAnC,GAASoC,OAAOK,QACd,sBAAqCH,OAAfE,EAAS,QAAYF,OAANtB,EAAM,UAIjDV,GAAoB,EACpBC,GAAY,EACZW,GAAoBC,OAAOF,EAAKG,a","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nlet amountOfPromises = 1;\nlet position = 1;\n\nrefs.form.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(e) {\n  e.preventDefault();\n\n  const {\n    elements: { amount, delay, step },\n  } = e.currentTarget;\n\n  let delayForFunction = Number(delay.value);\n\n  const intervalId = setInterval(() => {\n    if (amountOfPromises > Number(amount.value)) {\n      amountOfPromises = 1;\n      position = 1;\n      clearInterval(intervalId);\n      return;\n    }\n\n    createPromise(position, delayForFunction)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n\n    amountOfPromises += 1;\n    position += 1;\n    delayForFunction += Number(step.value);\n  });\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        // Fulfill\n        resolve({\n          position: position,\n          delay: delay,\n        });\n      } else {\n        // Reject\n        reject({\n          position: position,\n          delay: delay,\n        });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$amountOfPromises","$ce04d3a99e08e73b$var$position","addEventListener","e","preventDefault","_elements","currentTarget","elements","amount","delay1","delay","step","delayForFunction","Number","value","intervalId","setInterval","clearInterval","position3","Promise","resolve","reject","setTimeout","Math","random","position","then","param","position1","$parcel$interopDefault","Notify","success","concat","catch","position2","failure"],"version":3,"file":"03-promises.8170af74.js.map"}